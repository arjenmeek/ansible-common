---
- name: create general purpose VM dir
  file: path={{ vmpath }} state=directory

- name: configure VMs in libvirt
  template: src=vm.xml.j2 dest=/etc/libvirt/qemu/{{ item }}.xml
  with_items: "{{ groups.vms }}"
  when: "{{ hostvars[item]['parent'] == inventory_hostname }}"

- name: use debootstrap to create VM template
  command: debootstrap --variant=minbase --include='extlinux ifupdown linux-image-amd64 openssh-server python python-apt' {{ debian_release }} {{ vmpath }}/template '{{ debian_mirror }}'
  args:
    creates: "{{ vmpath }}/template/etc/apt/sources.list"

- name: check which plain VM logical volumes already exist
  stat: path=/dev/{{ inventory_hostname }}/{{ item }}
  register: plain_root_lvs
  with_items: "{{ groups.vms }}"
  when: "{{ hostvars[item]['parent'] == inventory_hostname and not hostvars[item]['encrypted_root']|default(False) }}"

- name: check which encrypted VM logical volumes already exist
  stat: path="/dev/{{ inventory_hostname }}/{{ item }}_encrypted"
  register: encrypted_root_lvs
  with_items: "{{ groups.vms }}"
  when: "{{ hostvars[item]['parent'] == inventory_hostname and hostvars[item]['encrypted_root']|default(False) }}"

- name: determine which plain VMs need bootstrapping
  set_fact: bootstrap_plain_vms="{{ plain_root_lvs.results|selectattr('stat', 'defined')|selectattr('stat.exists', 'equalto', False)|map(attribute='item')|list }}"

- name: determine which encrypted VMs need bootstrapping
  set_fact: bootstrap_encrypted_vms="{{ encrypted_root_lvs.results|selectattr('stat', 'defined')|selectattr('stat.exists', 'equalto', False)|map(attribute='item')|list }}"

- name: bootstrap each plain VM
  include: bootstrap.yml
  with_items: "{{ bootstrap_plain_vms }}"

- name: bootstrap each encrypted VM
  include: bootstrap_encrypted.yml
  with_items: "{{ bootstrap_encrypted_vms }}"

- name: start plain VMs that were just bootstrapped
  command: virsh create /etc/libvirt/qemu/{{ item }}.xml
  with_items: "{{ bootstrap_plain_vms + bootstrap_encrypted_vms }}"

- name: wait for plain VMs to start
  wait_for: port=22 host={{ networks[hostvars[item]['interfaces'][0].network].network|ipaddr(hostvars[item].ipnum)|ipaddr('address') }}
  delegate_to: localhost
  with_items: "{{ bootstrap_plain_vms + bootstrap_encrypted_vms }}"
